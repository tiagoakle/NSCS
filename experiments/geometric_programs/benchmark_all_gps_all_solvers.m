clear all
%Runs all GP problems in coneopt
%Saves the results to the table stored in 
% the tex file 'benchmark_results_gp.mat'
addpath '../../coneopt'
addpath '../../matlab'

%Problems in the paper
problem_names = {...
'beck751.eo',...
'beck752.eo',...
'beck753.eo',...
'bss2.eo',...
'car.eo',...
'demb761.eo',...
'demb762.eo',...
'demb763.eo',...
'demb781.eo',...
'fang88.eo',...
'fiac81a.eo',...
'fiac81b.eo',...
'gptest.eo',...
'jha88.eo',...
'mra01.eo',...
'mra02.eo',...
'rijc781.eo',...
'rijc782.eo',...
'rijc783.eo',...
'rijc784.eo',...
'rijc785.eo',...
'rijc786.eo',...
'rijc787.eo'};

% All problems
%problem_names = {...
%'beck751.eo',...
%'beck752.eo',...
%'beck753.eo',...
%'bss1.eo',...
%'bss2.eo',...
%'car.eo',...
%'demb761.eo',...
%'demb762.eo',...
%'demb763.eo',...
%'demb781.eo',...
%'demb782.eo',...
%'fang88.eo',...
%'fiac81a.eo',...
%'fiac81b.eo',...
%'gp_dave_1.eo',...
%'gp_dave_2.eo',...
%'gp_dave_3.eo',...
%'gptest.eo',...
%'isil01.eo',...
%'jha88.eo',...
%'mra01.eo',...
%'mra02.eo',...
%'patil1.eo',...
%'patil2.eo',...
%'patil3.eo',...
%'rijc781.eo',...
%'rijc782.eo',...
%'rijc783.eo',...
%'rijc784.eo',...
%'rijc785.eo',...
%'rijc786.eo',...
%'rijc787.eo',...
%'varun.eo',...
%'cx02-100.eo',...
%'cx02-200.eo'};

%Define the cell array for the results and include the header
results = {{'Prob name','co','status','lstep','status','lstepn','status',...
                                      'lstep fo','status','predcor','status'}};
                                     
fid = 1;
problem_count = size(problem_names,2);
for(j =1:problem_count)
    
    fprintf('Will solve problem %s \n',problem_names{j});
    problem_file_name = problem_names{j};
    %Add the path to the file
    problem_file_name = ['./gp/',problem_file_name];
    [AA,bb,cc,num_ter,num_var,num_con] = read_gp(problem_file_name);
    
    %----------------------------------------------------
    % coneopt call 
    %---------------------------------------------------
    % build cone:
    K.npos = 2*num_var+1;
    K.npow = 0;
    K.nexp = num_ter;
    K.nlog = 0;
    K      = getbarrpar(K);
    
    %Set the parameters
    pars.n = 3*num_ter + 2*num_var + 1;
    pars.m = 2*num_ter + num_con+1;
    pars.echo = 4;

    pars.secord = 1;
    pars.cnbfgsstps = 3;
    pars.theta = 0.7;
    pars.eta   = 0.5;
    pars.beta  = 0.2;
   
    pars.rhoP  = 1e-5;
    pars.rhoD  = 1e-5;
    pars.rhoA  = 1e-5;
    pars.rhoG  = 1e-5;
    pars.rhoI  = 1e-7;
    pars.rhoM  = 1e-7;

    
    % starting point:
    t00 = 1;
    up0 = ones(num_var,1);
    um0 = ones(num_var,1);
    w00 = -ones(num_ter,1);
    v00 = ones(num_ter,1);  
    y00 = 0.5*ones(num_ter,1);
    
    v0.x  = [t00;up0;um0;w00;v00;y00];
    
    % call to coneopt:
    R = coneopt(AA,bb,cc,v0,K,pars);
    cone_kkt = R.dat.nkktsolves;
    cone_sta = R.status;
   
    %--------------------------------------------------------------------------
    % Solve with nscs
    %--------------------------------------------------------------------------
    %Set up call to nscs
    % starting point:
    t00 = 1;
    up0 = ones(num_var,1);
    um0 = ones(num_var,1);
    w00 = -ones(num_ter,1);
    v00 = ones(num_ter,1);  
    y00 = 0.5*ones(num_ter,1);
    
    %Extract the problem data and build the problem structure
    problem = struct;
    problem.A = AA;
    problem.b = bb;
    problem.c = cc;
    
    %Problem parameters
    problem.m =2*num_ter + num_con+1;
    problem.n = 3*num_ter + 2*num_var + 1;
    problem.n_free = 0;
    problem.n_constrained = 2*num_var+1+3*num_ter;
    problem.n_pos       = 2*num_var+1;
    problem.soc_cones   = 0;
    problem.n_soc_cones = 0;
    problem.n_sdp_cones = 0;
    problem.sdp_cones     = 0;
    problem.n_exp_cones   = num_ter;
    problem.n_power_cones = 0;
   
    %Algorithm parameters
    pars.solve_second_order = true;

    x0c  = [t00;up0;um0;w00;v00;y00];
    x0f  = [];

    set_default_pars_nscs;
    pars.max_iter = 200;
    nscs 
    nscs_kkt = state.kkt_solves; 
    nscs_sta = state.exit_reason;
     
    set_default_pars_nscs_long_step;
    pars.max_iter = 200;

    %--------------------------------------------------------------------------
    % Solve with nscs long step and no nt scaling
    %--------------------------------------------------------------------------
    pars.use_nesterov_todd_scaling = false;
    nscs_long_step
    nscs_ls_kkt = state.kkt_solves; 
    nscs_ls_sta = state.exit_reason;
      
    %--------------------------------------------------------------------------
    % Solve with nscs long step and using nt scaling
    %-------------------------------------------------------------------------- 
    pars.use_nesterov_todd_scaling = true;
    nscs_long_step
    nscs_lsnt_kkt = state.kkt_solves; 
    nscs_lsnt_sta = state.exit_reason;
 
    %--------------------------------------------------------------------------
    % Solve with nscs long step and using nt scaling and no second order
    %-------------------------------------------------------------------------- 
    pars.use_nesterov_todd_scaling = true;
    pars.solve_second_order        = false;
    nscs_long_step
    nscs_lsntfo_kkt = state.kkt_solves; 
    nscs_lsntfo_sta = state.exit_reason;

    %--------------------------------------------------------------------------
    % Save the results 
    %--------------------------------------------------------------------------
    problem_result =   {problem_names{j},cone_kkt,cone_sta,...
                        nscs_ls_kkt,nscs_ls_sta,...
                        nscs_lsnt_kkt,nscs_lsnt_sta,...
                        nscs_lsntfo_kkt,nscs_lsntfo_sta,...
                        nscs_kkt,nscs_sta};
    results        =   {results{:},problem_result};

    %Print out after every iteration 
       fprintf(fid,'%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s\n',...
                                                  results{1}{1},results{1}{2},...
                                                  results{1}{3},results{1}{4},...
                                                  results{1}{5},results{1}{6},...
                                                  results{1}{7},results{1}{8},...
                                                  results{1}{9},results{1}{10},...
                                                  results{1}{11});
    for j=2:size(results,2)
       fprintf(fid,'%10s, %3i, %15s, %3i, %15s, %3i, %15s, %3i, %15s, %3i, %15s \n',...
                                                  results{j}{1},results{j}{2},...
                                                  results{j}{3},results{j}{4},...
                                                  results{j}{5},results{j}{6},...
                                                  results{j}{7},results{j}{8},...
                                                  results{j}{9},results{j}{10},...
                                                  results{j}{11});

    end
 
end

%Clear all but results 
clear -REGEXP '^(?!.*?results).*'
%Save to file
save 'benchmark_results_gp'

