clear all
%Runs all GP problems in coneopt
%Saves the results to the table stored in 
% the tex file 'coneopt_gp_run_results.tex'
addpath '../../coneopt'

%Short and easy
problem_names = {...
'beck751.eo',...
'beck752.eo',...
'beck753.eo',...
'bss2.eo',...
'car.eo',...
'demb761.eo',...
'demb762.eo',...
'demb763.eo',...
'demb781.eo',...
'fang88.eo',...
'fiac81a.eo',...
'fiac81b.eo',...
'gptest.eo',...
'jha88.eo',...
'mra01.eo'};


%%Problems in the paper
%problem_names = {...
%'beck751.eo',...
%'beck752.eo',...
%'beck753.eo',...
%'bss2.eo',...
%'car.eo',...
%'demb761.eo',...
%'demb762.eo',...
%'demb763.eo',...
%'demb781.eo',...
%'fang88.eo',...
%'fiac81a.eo',...
%'fiac81b.eo',...
%'gptest.eo',...
%'jha88.eo',...
%'mra01.eo',...
%'mra02.eo',...
%'rijc781.eo',...
%'rijc782.eo',...
%'rijc783.eo',...
%'rijc784.eo',...
%'rijc785.eo',...
%'rijc786.eo',...
%'rijc787.eo'};

%% All problems
%problem_names = {...
%'beck751.eo',...
%'beck752.eo',...
%'beck753.eo',...
%'bss1.eo',...
%'bss2.eo',...
%'car.eo',...
%'demb761.eo',...
%'demb762.eo',...
%'demb763.eo',...
%'demb781.eo',...
%'demb782.eo',...
%'fang88.eo',...
%'fiac81a.eo',...
%'fiac81b.eo',...
%'gp_dave_1.eo',...
%'gp_dave_2.eo',...
%'gp_dave_3.eo',...
%'gptest.eo',...
%'isil01.eo',...
%'jha88.eo',...
%'mra01.eo',...
%'mra02.eo',...
%'patil1.eo',...
%'patil2.eo',...
%'patil3.eo',...
%'rijc781.eo',...
%'rijc782.eo',...
%'rijc783.eo',...
%'rijc784.eo',...
%'rijc785.eo',...
%'rijc786.eo',...
%'rijc787.eo',...
%'varun.eo',...
%'cx02-100.eo',...
%'cx02-200.eo'};


%Cell array for the results
results = {{'Header','number of variables','number of constraints','number of terms','affine iterations','centering iterations','KKT solves','status'}};

problem_count = size(problem_names,2);
for(j =1:problem_count)
    
    fprintf('Will solve problem %s \n',problem_names{j});
    problem_file_name = problem_names{j};
    %Add the path to the file
    problem_file_name = ['./gp/',problem_file_name];

    [AA,bb,cc,num_ter,num_var,num_con] = read_gp(problem_file_name);

    % build cone:
    K.npos = 2*num_var+1;
    K.npow = 0;
    K.nexp = num_ter;
    K.nlog = 0;
    K      = getbarrpar(K);
    
    %Set the parameters
    pars.n = 3*num_ter + 2*num_var + 1;
    pars.m = 2*num_ter + num_con+1;
    pars.echo = 4;

%    pars.secord = 1;
    pars.cnbfgsstps = 3;
    pars.theta = 0.7;
    pars.eta   = 0.5;
    pars.beta  = 0.8;
   
    pars.rhoP  = 1e-5;
    pars.rhoD  = 1e-5;
    pars.rhoA  = 1e-5;
    pars.rhoG  = 1e-5;
    pars.rhoI  = 1e-5;

    %pars.centmeastype = 5;
    
    % starting point:
    t00 = 1;
    up0 = ones(num_var,1);
    um0 = ones(num_var,1);
    w00 = -ones(num_ter,1);
    v00 = ones(num_ter,1);  
    y00 = 0.5*ones(num_ter,1);
    
    v0.x  = [t00;up0;um0;w00;v00;y00];
    
    % call to coneopt:
    R = coneopt(AA,bb,cc,v0,K,pars);

    %Save to the results array 
    % 'Prob Name','number of variables','number of constraints','number of terms','affine iterations','centering iterations','KKT solves','status'
    problem_result = {problem_names{j},num_var,num_con,num_ter,size(R.dat.amaxaff,2),R.dat.ncentsteps,R.dat.nkktsolves,R.status};
    results = {results{:},problem_result};
 
end

%Print out
fid = 1;

   fprintf(fid,'%s, %s, %s, %s, %s\n','Name','It','KKT','Ce','Status');
for j=2:size(results,2)
   fprintf(fid,'%10s, %3i, %3i, %3i, %10s\n',results{j}{1},results{j}{5},results{j}{7},results{j}{6},results{j}{8});
end

%Clear all but results 
clear -REGEXP '^(?!.*?results).*'
%Save to file
save 'coneopt_gp_run_results'
